(function(){const template=document.createElement("template");template.innerHTML=`\n    <style>\n      :host {\n        display: flex;\n        flex-wrap: wrap;\n      }\n      ::slotted(gfg-panel) {\n        flex-basis: 100%;\n      }\n    </style>\n    <slot name="tab"></slot>\n    <slot name="panel"></slot>\n  `;class GfgTabs extends HTMLElement{constructor(){super();this._onSlotChange=this._onSlotChange.bind(this);this.attachShadow({mode:"open"});this.shadowRoot.appendChild(template.content.cloneNode(true));this._tabSlot=this.shadowRoot.querySelector("slot[name=tab]");this._panelSlot=this.shadowRoot.querySelector("slot[name=panel]");this._tabSlot.addEventListener("slotchange",this._onSlotChange);this._panelSlot.addEventListener("slotchange",this._onSlotChange)}connectedCallback(){this.addEventListener("click",this._onClick);if(!this.hasAttribute("role"))this.setAttribute("role","tablist");Promise.all([customElements.whenDefined("gfg-tab"),customElements.whenDefined("gfg-panel")]).then(_=>this._linkPanels())}disconnectedCallback(){this.removeEventListener("keydown",this._onKeyDown);this.removeEventListener("click",this._onClick)}_onSlotChange(){this._linkPanels()}_linkPanels(){const tabs=this._allTabs();tabs.forEach(tab=>{const panel=tab.nextElementSibling;if(panel.tagName.toLowerCase()!=="gfg-panel"){console.error(`Tab #${tab.id} is not a`+`sibling of a <gfg-panel>`);return}tab.setAttribute("aria-controls",panel.id);panel.setAttribute("aria-labelledby",tab.id)});const selectedTab=tabs.find(tab=>tab.selected)||tabs[0];this._selectTab(selectedTab)}_allPanels(){return Array.from(this.querySelectorAll("gfg-panel"))}_allTabs(){return Array.from(this.querySelectorAll("gfg-tab"))}_panelForTab(tab){const panelId=tab.getAttribute("aria-controls");if(panelId!=="")return this.querySelector(`#${panelId}`)}reset(){const tabs=this._allTabs();const panels=this._allPanels();tabs.forEach(tab=>tab.selected=false);panels.forEach(panel=>panel.hidden=true)}_selectTab(newTab){this.reset();const newPanel=newTab.nextElementSibling;if(!newPanel)throw new Error(`No panel with id`);newTab.selected=true;newPanel.hidden=false}_onClick(event){if(event.target.getAttribute("role")!=="tab")return;this._selectTab(event.target)}}customElements.define("gfg-tabs",GfgTabs);let gfgTabCounter=0;class GfgTab extends HTMLElement{static get observedAttributes(){return["selected"]}connectedCallback(){this.setAttribute("role","tab");if(!this.id)this.id=`gfg-tab-generated-${gfgTabCounter++}`;this.setAttribute("aria-selected","false");this.setAttribute("tabindex",-1);this._upgradeProperty("selected")}_upgradeProperty(prop){if(this.hasOwnProperty(prop)){let value=this[prop];delete this[prop];this[prop]=value}}attributeChangedCallback(){const value=this.hasAttribute("selected");this.setAttribute("aria-selected",value);this.setAttribute("tabindex",value?0:-1)}set selected(value){value=Boolean(value);if(value)this.setAttribute("selected","");else this.removeAttribute("selected")}get selected(){return this.hasAttribute("selected")}}customElements.define("gfg-tab",GfgTab);let gfgPanelCounter=0;class GfgPanel extends HTMLElement{connectedCallback(){this.setAttribute("role","tabpanel");if(!this.id)this.id=`gfg-panel-generated-${gfgPanelCounter++}`}}customElements.define("gfg-panel",GfgPanel)})();